# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox, QFileDialog
import sys
import re
from rsa import RSA
import rsa as algo


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(795, 689)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        MainWindow.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"),
                       QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(360, 5, 64, 35))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(23)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 40, 371, 271))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        self.label_2 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 30, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.encrypt_plain = QtWidgets.QPlainTextEdit(parent=self.groupBox)
        self.encrypt_plain.setGeometry(QtCore.QRect(80, 20, 281, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.encrypt_plain.setFont(font)
        self.encrypt_plain.setObjectName("encrypt_plain")
        self.label_8 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(10, 130, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.encrypt_cipher = QtWidgets.QPlainTextEdit(parent=self.groupBox)
        self.encrypt_cipher.setGeometry(QtCore.QRect(80, 120, 281, 111))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.encrypt_cipher.setFont(font)
        self.encrypt_cipher.setObjectName("encrypt_cipher")
        self.encrypt = QtWidgets.QPushButton(parent=self.groupBox)
        self.encrypt.setGeometry(QtCore.QRect(100, 240, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.encrypt.setFont(font)
        self.encrypt.setObjectName("encrypt")
        self.encrypt_file = QtWidgets.QPushButton(parent=self.groupBox)
        self.encrypt_file.setGeometry(QtCore.QRect(160, 90, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.encrypt_file.setFont(font)
        self.encrypt_file.setObjectName("encrypt_file")
        self.encrypt_save = QtWidgets.QPushButton(parent=self.groupBox)
        self.encrypt_save.setGeometry(QtCore.QRect(230, 240, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.encrypt_save.setFont(font)
        self.encrypt_save.setObjectName("encrypt_save")
        self.groupBox_3 = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(104, 320, 581, 301))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_3.setObjectName("groupBox_3")
        self.snt_q = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.snt_q.setGeometry(QtCore.QRect(300, 20, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.snt_q.setFont(font)
        self.snt_q.setObjectName("snt_q")
        self.label_5 = QtWidgets.QLabel(parent=self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(290, 20, 21, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.public_key = QtWidgets.QTextEdit(parent=self.groupBox_3)
        self.public_key.setGeometry(QtCore.QRect(120, 110, 321, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.public_key.setFont(font)
        self.public_key.setObjectName("public_key")
        self.label_10 = QtWidgets.QLabel(parent=self.groupBox_3)
        self.label_10.setGeometry(QtCore.QRect(40, 200, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(parent=self.groupBox_3)
        self.label_11.setGeometry(QtCore.QRect(40, 120, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.generate_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.generate_key.setGeometry(QtCore.QRect(320, 80, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.generate_key.setFont(font)
        self.generate_key.setObjectName("generate_key")
        self.label_3 = QtWidgets.QLabel(parent=self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(110, 20, 21, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.snt_p = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.snt_p.setGeometry(QtCore.QRect(120, 20, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.snt_p.setFont(font)
        self.snt_p.setObjectName("snt_p")
        self.private_key = QtWidgets.QTextEdit(parent=self.groupBox_3)
        self.private_key.setGeometry(QtCore.QRect(120, 190, 321, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.private_key.setFont(font)
        self.private_key.setObjectName("private_key")
        self.label_6 = QtWidgets.QLabel(parent=self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(110, 50, 21, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.modulo = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.modulo.setGeometry(QtCore.QRect(120, 50, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.modulo.setFont(font)
        self.modulo.setObjectName("modulo")
        self.random_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.random_key.setGeometry(QtCore.QRect(130, 80, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.random_key.setFont(font)
        self.random_key.setObjectName("random_key")
        self.add_public_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.add_public_key.setGeometry(QtCore.QRect(450, 150, 121, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.add_public_key.setFont(font)
        self.add_public_key.setObjectName("add_public_key")
        self.save_public_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.save_public_key.setGeometry(QtCore.QRect(450, 120, 121, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.save_public_key.setFont(font)
        self.save_public_key.setObjectName("save_public_key")
        self.label_7 = QtWidgets.QLabel(parent=self.groupBox_3)
        self.label_7.setGeometry(QtCore.QRect(290, 50, 21, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.phi_n = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.phi_n.setGeometry(QtCore.QRect(300, 50, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.phi_n.setFont(font)
        self.phi_n.setObjectName("phi_n")
        self.add_private_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.add_private_key.setGeometry(QtCore.QRect(450, 230, 121, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.add_private_key.setFont(font)
        self.add_private_key.setObjectName("add_private_key")
        self.save_private_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.save_private_key.setGeometry(QtCore.QRect(450, 200, 121, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.save_private_key.setFont(font)
        self.save_private_key.setObjectName("save_private_key")
        self.save_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.save_key.setGeometry(QtCore.QRect(130, 270, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.save_key.setFont(font)
        self.save_key.setObjectName("save_key")
        self.add_key = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.add_key.setGeometry(QtCore.QRect(320, 270, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.add_key.setFont(font)
        self.add_key.setObjectName("add_key")
        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(410, 40, 371, 271))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_4 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(10, 170, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.decrypt_plain = QtWidgets.QPlainTextEdit(parent=self.groupBox_2)
        self.decrypt_plain.setGeometry(QtCore.QRect(80, 170, 281, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.decrypt_plain.setFont(font)
        self.decrypt_plain.setObjectName("decrypt_plain")
        self.label_9 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_9.setGeometry(QtCore.QRect(10, 30, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.decrypt_cipher = QtWidgets.QPlainTextEdit(parent=self.groupBox_2)
        self.decrypt_cipher.setGeometry(QtCore.QRect(80, 20, 281, 111))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.decrypt_cipher.setFont(font)
        self.decrypt_cipher.setObjectName("decrypt_cipher")
        self.decrypt = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.decrypt.setGeometry(QtCore.QRect(100, 240, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.decrypt.setFont(font)
        self.decrypt.setObjectName("decrypt")
        self.decrypt_file = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.decrypt_file.setGeometry(QtCore.QRect(160, 140, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.decrypt_file.setFont(font)
        self.decrypt_file.setObjectName("decrypt_file")
        self.decrypt_save = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.decrypt_save.setGeometry(QtCore.QRect(240, 240, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.decrypt_save.setFont(font)
        self.decrypt_save.setObjectName("decrypt_save")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 795, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtGui.QAction(parent=MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # key
        self.generate_key.clicked.connect(self.generate)
        self.random_key.clicked.connect(self.random)
        self.save_key.clicked.connect(self.save)
        self.add_key.clicked.connect(self.add)

        # public
        self.save_public_key.clicked.connect(self.save_public)
        self.add_public_key.clicked.connect(self.add_public)
        # private
        self.save_private_key.clicked.connect(self.save_private)
        self.add_private_key.clicked.connect(self.add_private)

        # encryption
        self.encrypt.clicked.connect(self.encryption)
        self.encrypt_file.clicked.connect(self.encrypt_browse)
        self.encrypt_save.clicked.connect(self.encrypt_save_file)

        # decryption
        self.decrypt.clicked.connect(self.decryption)
        self.decrypt_file.clicked.connect(self.decrypt_browse)
        self.decrypt_save.clicked.connect(self.decrypt_save_file)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "RSA algorithm"))
        self.label.setText(_translate("MainWindow", "RSA"))
        self.groupBox.setTitle(_translate("MainWindow", "ENCRYPTION"))
        self.label_2.setText(_translate("MainWindow", "Plaintext"))
        self.label_8.setText(_translate("MainWindow", "Ciphertext"))
        self.encrypt.setText(_translate("MainWindow", "Encrypt"))
        self.encrypt_file.setText(_translate("MainWindow", "Add"))
        self.encrypt_save.setText(_translate("MainWindow", "Save"))
        self.groupBox_3.setTitle(_translate("MainWindow", "KEY"))
        self.label_5.setText(_translate("MainWindow", "q"))
        self.label_10.setText(_translate("MainWindow", "Private Key"))
        self.label_11.setText(_translate("MainWindow", "Public Key"))
        self.generate_key.setText(_translate("MainWindow", "Generate Key"))
        self.label_3.setText(_translate("MainWindow", "p"))
        self.label_6.setText(_translate("MainWindow", "n"))
        self.random_key.setText(_translate("MainWindow", "Random Key"))
        self.add_public_key.setText(_translate("MainWindow", "Add Public Key"))
        self.save_public_key.setText(
            _translate("MainWindow", "Save Public Key"))
        self.label_7.setText(_translate("MainWindow", "ϕ"))
        self.add_private_key.setText(
            _translate("MainWindow", "Add Private Key"))
        self.save_private_key.setText(
            _translate("MainWindow", "Save Private Key"))
        self.save_key.setText(_translate("MainWindow", "Save Key"))
        self.add_key.setText(_translate("MainWindow", "Add Key"))
        self.groupBox_2.setTitle(_translate("MainWindow", "DECRYPTION"))
        self.label_4.setText(_translate("MainWindow", "Plaintext"))
        self.label_9.setText(_translate("MainWindow", "Ciphertext"))
        self.decrypt.setText(_translate("MainWindow", "Decrypt"))
        self.decrypt_file.setText(_translate("MainWindow", "Add"))
        self.decrypt_save.setText(_translate("MainWindow", "Save"))
        self.menuFile.setTitle(_translate(
            "MainWindow", "Made By 521H0489 - Ho Huu An"))
        self.actionAbout.setText(_translate("MainWindow", "About"))

    # key
    def generate(self):
        p = (self.snt_p.text())
        q = (self.snt_q.text())
        if p == '' or q == '':
            self.warning("Input p and q")

        elif len(p) > 15 or len(q) > 15:
            self.warning("Please input p and q smaller")

        elif p.isdigit() == False or q.isdigit() == False:
            self.warning("Please input only number")
        elif algo.is_prime(int(p)) and algo.is_prime(int(q)) and p != q:
            self.rsa = RSA(p=int(p), q=int(q))
            if self.rsa.N < 1000:
                self.warning("Please choose p and q in onder to n more than")
            else:
                self.modulo.setText(str(self.rsa.N))
                self.public_key.setText(str(self.rsa.e))
                self.private_key.setText(str(self.rsa.d))
                self.phi_n.setText(str(self.rsa.phi))
        else:
            self.warning("p and q must be different and prime number")

    def random(self):
        self.rsa = RSA()
        self.snt_p.setText(str(self.rsa.p))
        self.snt_q.setText(str(self.rsa.q))
        self.modulo.setText(str(self.rsa.N))
        self.public_key.setText(str(self.rsa.e))
        self.private_key.setText(str(self.rsa.d))
        self.phi_n.setText(str(self.rsa.phi))

    def save(self):
        if self.modulo.text() == "" or self.public_key.toPlainText() == "" or self.private_key.toPlainText() == "":
            self.warning("Save Failed")
        else:
            key = [self.modulo.text() + "\n", self.public_key.toPlainText() +
                   "\n", self.private_key .toPlainText()]
            with open("key.txt", "w") as file:
                file.writelines(key)
                self.success("Save Key Successfully")

    def add(self):
        filename = QFileDialog.getOpenFileName(filter="Text files (*.txt)")
        path = filename[0]
        if path != "":
            with open(path, "r") as f:
                lines = f.readlines()
                if len(lines) > 3 and (lines[0].isdigit() == False or lines[1].isdigit() == False or lines[2].isdigit() == False):
                    self.warning("Invalid File")
                else:
                    self.modulo.setText(lines[0])
                    self.public_key.setText(lines[1])
                    self.private_key.setText(lines[2])
                    self.snt_p.clear()
                    self.snt_q.clear()
                    self.phi_n.clear()

    # public key
    def save_public(self):
        if self.modulo.text() == "" or self.public_key.toPlainText() == "":
            self.warning("Save Failed")
        else:
            key = [self.modulo.text() + "\n", self.public_key.toPlainText()]
            with open("Public key.txt", "w") as file:
                file.writelines(key)
                self.success("Save Public Key Successfully")

    def add_public(self):
        filename = QFileDialog.getOpenFileName(filter="Text files (*.txt)")
        path = filename[0]
        if path != "":
            with open(path, "r") as f:
                lines = f.readlines()
                if len(lines) > 2 and (lines[0].isdigit() == False or lines[1].isdigit() == False):
                    self.warning("Invalid File")
                else:
                    self.modulo.setText(lines[0])
                    self.public_key.setText(lines[1])
                    self.private_key.clear()
                    self.snt_p.clear()
                    self.snt_q.clear()
                    self.phi_n.clear()

    # private key
    def save_private(self):
        if self.modulo.text() == "" or self.private_key.toPlainText() == "":
            self.warning("Save Failed")
        else:
            key = [self.modulo.text() + "\n", self.private_key.toPlainText()]
            with open("Private key.txt", "w") as file:
                file.writelines(key)
                self.success("Save Private Key Successfully")

    def add_private(self):
        filename = QFileDialog.getOpenFileName(filter="Text files (*.txt)")
        path = filename[0]
        if path != "":
            with open(path, "r") as f:
                lines = f.readlines()
                if len(lines) > 2 and (lines[0].isdigit() == False or lines[1].isdigit() == False):
                    self.warning("Invalid File")
                else:
                    self.modulo.setText(lines[0])
                    self.private_key.setText(lines[1])
                    self.public_key.clear()
                    self.snt_p.clear()
                    self.snt_q.clear()
                    self.phi_n.clear()
    # encryption

    def encryption(self):
        msg = self.encrypt_plain.toPlainText()
        if self.public_key.toPlainText() == '' or self.modulo.text() == '':
            self.warning("Input data into key")
        elif msg:
            enc = algo.encrypted(msg, int(self.modulo.text()), int(
                self.public_key.toPlainText()))
            self.encrypt_cipher.setPlainText(str(enc))
        else:
            self.warning("Input data into plaintext")

    def encrypt_save_file(self):
        if self.encrypt_cipher.toPlainText() == "":
            self.warning("Save Failed")
        else:
            with open("ciphertext.txt", "w") as file:
                file.write(str(self.encrypt_cipher.toPlainText()))
                self.success("Save Ciphertext Successfully")

    def encrypt_browse(self):
        filename = QFileDialog.getOpenFileName(filter="Text files (*.txt)")
        path = filename[0]
        if path != "":
            self.encrypt_plain.clear()
            with open(path, "r") as f:
                lines = f.readlines()
                for line in lines:
                    self.encrypt_plain.insertPlainText(line)
    # decryption

    def decryption(self):
        enc = self.decrypt_cipher.toPlainText()
        if enc.isalpha():
            dlg = QMessageBox()
            dlg.setWindowTitle("WARNING!")
            dlg.setText("Only input number")
            dlg.setIcon(QMessageBox.Icon.Warning)
            button = dlg.exec()
        elif self.modulo.text() == '' or self.private_key.toPlainText() == '':
            self.warning("Input data into key")
        elif enc:
            match = re.match(r'^[\d\s]+$', enc)
            if match:
                dec = algo.decrypted(enc, int(self.modulo.text()), int(
                    self.private_key.toPlainText()))
                if dec:
                    self.decrypt_plain.setPlainText(str(dec))
                else:
                    self.warning("Can Not Decrypt!")
            else:
                self.warning("Can Not Decrypt!")
        else:
            self.warning("Input data into ciphertext")

    def decrypt_save_file(self):
        try:
            if self.decrypt_plain.toPlainText() == "":
                self.warning("Save Failed")
            else:
                with open("plaintext.txt", "w") as file:
                    file.write(str(self.decrypt_plain.toPlainText()))
                    self.success("Save Plaintext Successfully")
        except UnicodeEncodeError:
            self.warning("Save Failed")

    def decrypt_browse(self):
        filename = QFileDialog.getOpenFileName(filter="Text files (*.txt)")
        path = filename[0]
        if path != "":
            with open(path, "r") as f:
                line = f.readline()
                match = re.match(r'^[\d\s]+$', line)
                if match:
                    self.decrypt_cipher.setPlainText(line)
                else:
                    self.warning("Invalid File")

    def warning(self, str):
        dlg = QMessageBox()
        dlg.setWindowTitle("WARNING!")
        dlg.setText(str)
        dlg.setIcon(QMessageBox.Icon.Warning)
        button = dlg.exec()

    def success(self, str):
        dlg = QMessageBox()
        dlg.setWindowTitle("Information!")
        dlg.setText(str)
        dlg.setIcon(QMessageBox.Icon.Information)
        button = dlg.exec()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
